# Copyright (c) 2022 Adam Karpierz
# SPDX-License-Identifier: Zlib

[build-system]
build-backend = 'setuptools.build_meta'
requires = ['setuptools>=80.9.0', 'packaging>=25.0.0', 'tox>=4.30.2']

[project]
name        = 'py-chocolatey'
version     = '0.9.0'
description = 'API for Chocolatey, the Package Manager for Windows.'
authors = [
    { name  = 'Adam Karpierz' },
    { email = 'adam@karpierz.net' },
]
maintainers = [
    { name  = 'Adam Karpierz' },
    { email = 'adam@karpierz.net' },
]
license = 'Zlib'
license-files = ['LICENSE']
urls.Homepage      = 'https://pypi.org/project/py-chocolatey/'
urls.Documentation = 'https://py-chocolatey.readthedocs.io/'
urls.Download      = 'https://pypi.org/project/py-chocolatey/'
urls.Source        = 'https://github.com/karpierz/py-chocolatey'
urls.Issues        = 'https://github.com/karpierz/py-chocolatey/issues'
keywords = ['chocolatey', 'choco']
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Operating System :: Microsoft :: Windows',
    'Natural Language :: Polish',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3.14',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: Implementation :: CPython',
    'Programming Language :: Python :: Implementation :: PyPy',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Typing :: Typed',
]
requires-python = '>=3.10.0,<4.0.0'
dependencies = [
    # mandatory
    'setuptools>=80.9.0',
    'typing_extensions>=4.15.0',
    'pkg-about>=2.0.0',
    # others
    'py-utlx>=1.1.0',
    'nocasedict>=2.1.0',
    'regex>=2025.9.18',
    'platformdirs>=4.4.0',
]
dynamic = ['readme']
optional-dependencies.'doc' = [
    'Sphinx>=8.1.3',
    'sphinx-autodoc-typehints>=3.0.1',
    'sphinx-toolbox>=4.0.0',
    'sphinx-tabs>=3.4.5', # don't touch! sphinx-toolbox requires <3.4.7
    'sphinx-copybutton>=0.5.2',
    'sphinxcontrib-spelling>=8.0.1',
    'sphinx-lint>=1.0.0',
    'restructuredtext-lint>=1.4.0',
    'nbsphinx>=0.9.7',
]
optional-dependencies.'test' = [
    'deepdiff>=8.6.1',
    'rich>=14.1.0',
]

[project.scripts]
#'chocolatey' = 'chocolatey.__main__:main'

[project.gui-scripts]
#'chocolatey-gui' = 'chocolatey.gui:main'

#[project.entry-points.'chocolatey.magical']
#epoint = 'chocolatey:main_epoint'

[tool.setuptools.dynamic]
readme = { file = ['README.rst', 'CHANGES.rst'], content-type = 'text/x-rst; charset=UTF-8' }

[tool.setuptools]
include-package-data = true
platforms = ['win32']
zip-safe = true

[tool.setuptools.packages.find]
namespaces = false
where = ['src']

[tool.setuptools.package-dir]
'' = 'src'
#'chocolatey.tests' = 'tests'

[tool.setuptools.package-data]
chocolatey = [
    'choco-setup/*.*',
    'exe-bin/*.exe',
]

[tool.setuptools.exclude-package-data]
'*' = ['*.c','*.h','*.cpp','*.hpp','*.cxx','*.hxx','*.pyx','*.pxd']
chocolatey = [
]

[tool.coverage]
# run
run.source = [
    'chocolatey',
    'tests',
]
run.omit = [
    '**/tests/tman_*.py',
]
run.branch = true
run.data_file = '.tox/coverage/.coverage'
run.plugins = ['covdefaults']
# report
report.exclude_also = [
    # Regexes
    # Have to re-enable the standard pragma
    '^\s*if\s+self\.debug\s*:',
    '^\s*if\s+__debug__\s*:',
    '^\s*if\s+(0|False)\s*:',
    '''if\s+__name__.*\s*==\s*['"]__main__['"]\s*:''',
    '^\s*@unittest\.skip\(',
    '^\s*@unittest\.skipIf\(sys\.platform\.startswith\("win"\)',
    '^\s*@unittest\.skipIf\(is_windows,',
    '^\s*@unittest\.skipIf\(is_cpython,',
    'if typing.TYPE_CHECKING:',
    #
    '^\s*except\s+run\.CalledProcessError((\s+as\s+)|:)',
]
report.omit = [
    'tests/run.py',
]
report.skip_covered = false
# html report
html.directory = '.tox/coverage/.coverage.html'

[tool.flake8]
filename = ['*.py','*.pyx']
#include = ['tests']
#exclude = ['.tox','*.egg','.git','__pycache__','build','_build','docs/_build','dist']
max-line-length = 99
ignore = ['E126','E203','E221','E251','E302','E701','E702','E731',
          'E122','E127','E128','E222','E272','E241','E266','E226',
          'D100','D101','D102','D103','D104','D400','D401','D202',
          'N806','N802','N803','N801',
          'I100','W503']
# (e.g. 'E4','W') default: 'E121','E123','126','226','E24','704'
#select =
#select = ['E','W','F','N','I']
output-file = '.tox/lint/flake8out.txt'
count = true
#show-pep8,
#show-source
#verbose
#quiet

[tool.mypy]
python_version = '3.10'
strict = true
sqlite_cache = true
warn_unused_configs = true
exclude_gitignore = true
install_types = true
non_interactive = true
pretty = true
check_untyped_defs = true
#ignore_missing_imports = true
files = ['src']
#exclude = ['docs/', 'tests/']

#
# Configuration(s) for tox
#

[tool.tox]
env_list = [{replace='ref',of=['tool','tox','labels','py'],extend=true},
            'coverage', 'typing', 'lint', 'docs']
skip_missing_interpreters = true
requires = [
    {replace='ref',of=['tool','tox','_','base','deps'],extend=true},
    'tox>=4.30.2',
    'virtualenv>=20.34.0',
    'tox-backtick>=1.0.0',
]
[tool.tox.labels]
py = ['py310','py311','py312','py313','py314', 'pypy310','pypy311']
prepare = ['cleanup', 'prepare']
cleanup = ['cleanup']
coverage = ['coverage']
typing = ['typing']
lint = ['lint']
docs = ['docs']
build  = [{replace='ref',of=['tool','tox','labels','py'],extend=true}, 'docs', 'build']
deploy = [{replace='ref',of=['tool','tox','labels','build'],extend=true}, 'publish']

[tool.tox._.base]
base_python = ['python3.13']
deps = [
    'pip>=25.2',
    'setuptools>=80.9.0',
]
package_subdir = 'chocolatey'

[tool.tox.env_run_base]
description = 'Run tests under {base_python}'
set_env.PYTHONDONTWRITEBYTECODE = '1'
set_env.TMP_DIR  = '{env:TEMP:{env:TMP:{env:TMPDIR:/tmp}}}'
set_env.PKG_PVER = "`{env_python} -W ignore -c \"print('{py_dot_ver}'.replace('.', ''), end='')\" 2> nul`"
set_env.PKG_IMPL = "`{env_python} -W ignore -c \"print(dict(cpython='cp', pypy='pp').get('{py_impl}', ''), end='')\" 2> nul`"
set_env.PKG_NAME = "`{env_python} -W ignore -c \"import setuptools ; setuptools._distutils.core._setup_stop_after='config' ; print(setuptools.setup().metadata.get_name(),     end='')\" 2> nul`"
set_env.PKG_DIST = "`{env_python} -W ignore -c \"import setuptools ; setuptools._distutils.core._setup_stop_after='config' ; print(setuptools.setup().metadata.get_fullname(), end='')\" 2> nul`"
commands = [
    ['{env_python}','--version'],
    ['{env_python}','-m','tests',{replace='posargs',extend=true}],
]
extras = ['test']
deps = [
    {replace='ref',of=['tool','tox','_','base','deps'],extend=true},
]

[tool.tox.env.'prepare']
depends = ['cleanup']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
skip_install = true
allowlist_externals = ['cmd', '.build']
commands = [
    ['cmd','/C','if','exist','.build.cmd','.build.cmd'],
]
extras = []
deps = []

[tool.tox.env.'cleanup']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
skip_install = true
no_package = true
env_log_dir = '{env:TMP_DIR}{/}tox.env.{env_name}-{env:PYTHONHASHSEED}{/}log'
env_tmp_dir = '{env:TMP_DIR}{/}tox.env.{env_name}-{env:PYTHONHASHSEED}{/}tmp'
allowlist_externals = ['cmd', '.clean']
commands = [
    ['cmd','/C','if','exist','.clean.cmd','.clean.cmd','2>','nul'],
    ['{env_python}','-W','ignore','-c',"import shutil ; shutil.rmtree('build', ignore_errors=True)"],
    ['{env_python}','-W','ignore','-c',"import shutil ; shutil.rmtree('dist', ignore_errors=True)"],
    ['{env_python}','-W','ignore','-c',"import shutil,glob ; [shutil.rmtree(item) for item in glob.glob('src/*.egg-info')]"],
    ['{env_python}','-W','ignore','-c',"import shutil,glob ; [shutil.rmtree(item) for item in glob.glob('**/__pycache__', recursive=True)]"],
    ['{env_python}','-W','ignore','-c',"import shutil,glob ; [shutil.rmtree(item) for item in glob.glob('**/.mypy_cache', recursive=True)]"],
    ['cmd','/C','if','exist','.tox','rmdir','/S/Q','.tox','2>','nul'],
]
extras = []
deps = []

[tool.tox.env.'coverage']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','coverage','erase'],
    ['-','{env_python}','-m','coverage','run','-m','tests',{replace='posargs',extend=true}],
    ['-','{env_python}','-m','coverage','html'],
    ['{env_python}','-m','coverage','report'],
]
deps = [
    {replace='ref',of=['tool','tox','env_run_base','deps'],extend=true},
    'coverage>=7.10.7',
    'covdefaults>=2.3.0',
    'diff-cover>=9.7.0',
]

[tool.tox.env.'docs']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','sphinxlint','-i','#arch','-i','.tox','-i','build','-i','dist','-i','.mypy_cache'],
   #['{env_python}','-m','sphinx.apidoc','-f','{env_site_packages_dir}/{[tool.tox._.base]package_subdir}'],
    ['{env_python}','-m','sphinx.cmd.build','-W','-a','-b','html','-E','./docs','./build/docs/html'],
    ['{env_python}','-m','sphinx.cmd.build','-W','-a','-b','linkcheck','./docs','./build/docs/html'],
    ['{env_python}','-m','sphinx.cmd.build','-W','-a','-b','doctest',  './docs','./build/docs/html'],
]
extras = ['doc']
deps = [
    {replace='ref',of=['tool','tox','_','base','deps'],extend=true},
]

[tool.tox.env.'build']
depends = [{replace='ref',of=['tool','tox','labels','py'],extend=true}, 'docs']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','check_manifest','-v'],
    ['{env_python}','-m','build'],
    # check out for PyPi
    ['{env_python}','-m','twine','check','dist/*'],
]
deps = [
    {replace='ref',of=['tool','tox','env_run_base','deps'],extend=true},
    'check-manifest>=0.50',
    'build>=1.3.0',
    'twine>=6.2.0',
]

[tool.tox.env.'publish']
depends = ['build']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
skip_install = true
commands = [
    # publish on PyPi
    ['{env_python}','-m','twine','upload','dist/*'],
]
extras = []
deps = [
    'twine>=6.2.0',
]

[tool.tox.env.'typing']
description = 'Static type checking'
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','mypy'],
]
extras = []
deps = [
    {replace='ref',of=['tool','tox','_','base','deps'],extend=true},
    'mypy>=1.18.2',
    'mypy_extensions>=1.1.0',
    'types-setuptools>=80.9.0.20250822',
]

[tool.tox.env.'lint']
base_python = {replace='ref',of=['tool','tox','_','base','base_python']}
commands = [
    ['{env_python}','-m','flake8','{env_site_packages_dir}/{[tool.tox._.base]package_subdir}/'],
]
extras = []
deps = [
    {replace='ref',of=['tool','tox','env_run_base','deps'],extend=true},
    'flake8>=7.3.0',
    'flake8-in-file-ignores>=0.3.0',
    'flake8-pyproject>=1.2.3',
    'flake8-docstrings>=1.7.0',
    'pep8-naming>=0.15.1',
    'flake8-builtins>=3.0.0',
    'flake8-deprecated>=2.2.1',
]
